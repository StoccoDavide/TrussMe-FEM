
# Matlab API

## Class Methods

### System {.unnumbered}

Class constructor for a system.

- **Parameters**:
  - `t_data`: The system data
- **Returns**:
  - The system object

Proto: `obj = System(t_data)`

### get_data {.unnumbered}

Get the system data.

- **Parameters**: None
- **Returns**:
  - The system data

Proto: `out = obj.get_data()`

### set_data {.unnumbered}

Set the system data field.

- **Parameters**:
  - `t_data`: The system data
- **Returns**: None

Proto: `obj.set_data(t_data)`

### get_data_field {.unnumbered}

Get the system data field.

- **Parameters**:
  - `field`: The system data field
- **Returns**:
  - The system data field value

Proto: `out = obj.get_data_field(field)`

### set_data_field {.unnumbered}

Set the system data field.

- **Parameters**:
  - `field`: The system data field
  - `value`: The system data field value
- **Returns**: None

Proto: `obj.set_data_field(field, value)`

### compute_K {.unnumbered}

Compute the system stiffness matrix $\mathbf{K}$ as:

$$
\mathbf{K} = \left[
  \begin{array}{cc}
    \mathbf{K}_{ff} & \mathbf{K}_{fs} \\
    \mathbf{K}_{sf} & \mathbf{K}_{ss}
  \end{array}
\right]
$$

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system stiffness matrix $\mathbf{K}$.

Proto: `out = obj.compute_K(x, v)`

### compute_d_f {.unnumbered}

Compute the system deformation vector of free dofs $\mathbf{d}_{f}$ as:

$$
\mathbf{d}_{f} = \mathbf{K}_{ff}^{-1} \left(
  \mathbf{f}_{f} - \mathbf{K}_{fs} \mathbf{d}_{s}
\right)
$$

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
  - `tol` [optional]: Tolerance for the iterative solver.
  - `itr` [optional]: Maximum number of solver iterations.
- **Returns**:
  - The system deformation vector $\mathbf{d}_{f}$.

Proto: `out = obj.compute_d_f(x, v, tol, itr)`

### compute_d {.unnumbered}

Compute the system deformation vector $\mathbf{d}$ as:

$$
\mathbf{d} = \left[
  \begin{array}{c}
    \mathbf{d}_{f} \\
    \mathbf{d}_{s}
  \end{array}
\right]
$$

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
  - `tol` [optional]: Tolerance for the iterative solver.
  - `itr` [optional]: Maximum number of solver iterations.
- **Returns**:
  - The system deformation vector $\mathbf{d}$.

Proto: `out = obj.compute_d(x, v, tol, itr)`

### compute_f_s {.unnumbered}

Compute the system force vector of specified dofs $\mathbf{f}_{s}$ as:

$$
\mathbf{f}_{s} = \mathbf{K}_{sf} \mathbf{d}_{f} +
  \mathbf{K}_{ss} \mathbf{d}_{s} - \mathbf{f}_{r}
$$

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
  - `tol` [optional]: Tolerance for the iterative solver.
  - `itr` [optional]: Maximum number of solver iterations.
- **Returns**:
  - The system force vector $\mathbf{f}_{s}$.

Proto: `out = obj.compute_f_s(x, v, tol, itr)`

### compute_f {.unnumbered}

Compute the system force vector $\mathbf{f}$ as:

$$
\mathbf{f} = \left[
  \begin{array}{c}
    \mathbf{f}_{f} \\
    \mathbf{f}_{s}
  \end{array}
\right]
$$

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
  - `tol` [optional]: Tolerance for the iterative solver.
  - `itr` [optional]: Maximum number of solver iterations.
- **Returns**:
  - The system force vector $\mathbf{f}$.

Proto: `out = obj.compute_f(x, v, tol, itr)`

### sanity_check {.unnumbered}

Internal structure sanity check.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
  - `tol` [optional]: Tolerance for the iterative solver.
  - `itr` [optional]: Maximum number of solver iterations.
- **Returns**:
  - An error is thrown if the sizes are not correct.

Proto: `obj.sanity_check(x, v, tol, itr)`

### check_symmetry {.unnumbered}

Check symmetry of stiffness matrices.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - An error is thrown if the matrices are not symmetric.

Proto: `obj.check_symmetry(x, v)`

## Abstract Methods

### K {.unnumbered}

Evaluate the system stiffness matrix $\mathbf{K}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system stiffness matrix $\mathbf{K}$.

Proto: `out = obj.K(x, v)`

### K_ff {.unnumbered}

Evaluate the system stiffness matrix of free-free dofs $\mathbf{K}_{ff}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system stiffness matrix $\mathbf{K}_{ff}$.

Proto: `out = obj.K_ff(x, v)`

### K_fs {.unnumbered}

Evaluate the system stiffness matrix of free-specified dofs $\mathbf{K}_{fs}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system stiffness matrix $\mathbf{K}_{fs}$.

Proto: `out = obj.K_fs(x, v)`

### K_sf {.unnumbered}

Evaluate the system stiffness matrix of specified-free dofs $\mathbf{K}_{sf}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system stiffness matrix $\mathbf{K}_{sf}$.

Proto: `out = obj.K_sf(x, v)`

### K_ss {.unnumbered}

Evaluate the system stiffness matrix of specified-specified dofs $\mathbf{K}_{ss}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system stiffness matrix $\mathbf{K}_{ss}$.

Proto: `out = obj.K_ss(x, v)`

### d {.unnumbered}

Evaluate the system deformation vector $\mathbf{d}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system deformation vector $\mathbf{d}$.

Proto: `out = obj.d(x, v)`

### d_f {.unnumbered}

Evaluate the system deformation vector of free dofs $\mathbf{d}_{f}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system deformation vector $\mathbf{d}_{f}$.

Proto: `out = obj.d_f(x, v)`

### d_s {.unnumbered}

Evaluate the system deformation vector of specified dofs $\mathbf{d}_{s}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system deformation vector $\mathbf{d}_{s}$.

Proto: `out = obj.d_s(x, v)`

### f {.unnumbered}

Evaluate the system force vector $\mathbf{f}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system force vector $\mathbf{f}$.

Proto: `out = obj.f(x, v)`

### f_f {.unnumbered}

Evaluate the system force vector of free dofs $\mathbf{f}_{f}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system force vector $\mathbf{f}_{f}$.

Proto: `out = obj.f_f(x, v)`

### f_s {.unnumbered}

Evaluate the system force vector of specified dofs $\mathbf{f}_{s}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system force vector $\mathbf{f}_{s}$.

Proto: `out = obj.f_s(x, v)`

### f_r {.unnumbered}

Evaluate the system remainder force vector $\mathbf{f}_{r}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
  - `v`: Veils $\mathbf{v}$.
- **Returns**:
  - The system remainder force vector $\mathbf{f}_{r}$.

Proto: `out = obj.f_r(x, v)`

### perm {.unnumbered}

Get the system permutation vector.

- **Parameters**: None
- **Returns**:
  - The permutation vector.

Proto: `out = obj.perm()`

### unperm {.unnumbered}

Get the unpermutation vector.

- **Parameters**: None
- **Returns**:
  - The unpermutation vector.

Proto: `out = obj.unperm()`

### v {.unnumbered}

Evaluate the veils $\mathbf{v}$.

- **Parameters**:
  - `x`: States $\mathbf{x}$.
- **Returns**:
  - The Veils $\mathbf{v}$..

Proto: `out = obj.v(x)`
