% +--------------------------------------------------------------------------+
% | 'TrussMe' module version 0.0 - BSD 3-Clause License - Copyright (c) 2023 |
% | Current version authors:                                                 |
% |   Davide Stocco and Matteo Larcher.                                      |
% +--------------------------------------------------------------------------+

% Matlab generated code for system: Test_08
% This file has been automatically generated by TrussMe.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Test_08 < TrussMe.System
  %
  % Test_08 class
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Test_08( varargin )
      % Class constructor.

      % User data
      if (nargin == 0)
        data = [];
      elseif (nargin == 1 && isstruct(varargin{1}))
        data = varargin{1};
      else
        error('wrong number of input arguments.');
      end

      % Call superclass constructor
      this = this@TrussMe.System(data);
    end % Test_08
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K = K( ~, ~, ~ )
      % Evaluate the stiffness matrix K.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K = sparse(30, 30);
      out_K(1, 1) = 1500000.;
      out_K(6, 1) = -1500000.;
      out_K(7, 1) = -1500000.;
      out_K(12, 1) = -1500000.;
      out_K(2, 2) = 1000000000.;
      out_K(8, 2) = -1000000000.;
      out_K(3, 3) = 1500000.;
      out_K(4, 3) = 1500000.;
      out_K(9, 3) = -1500000.;
      out_K(10, 3) = 1500000.;
      out_K(3, 4) = 1500000.;
      out_K(4, 4) = 2000000.;
      out_K(9, 4) = -1500000.;
      out_K(10, 4) = 1000000.;
      out_K(5, 5) = 500000.;
      out_K(11, 5) = -500000.;
      out_K(1, 6) = -1500000.;
      out_K(6, 6) = 2000000.;
      out_K(7, 6) = 1500000.;
      out_K(12, 6) = 1000000.;
      out_K(1, 7) = -1500000.;
      out_K(6, 7) = 1500000.;
      out_K(7, 7) = 770176617.5;
      out_K(8, 7) = 511085662.3;
      out_K(12, 7) = 475938.1000;
      out_K(13, 7) = -768676617.5;
      out_K(14, 7) = -511085662.3;
      out_K(18, 7) = -1024061.900;
      out_K(2, 8) = -1000000000.;
      out_K(7, 8) = 511085662.3;
      out_K(8, 8) = 1342771899.;
      out_K(12, 8) = 1536092.851;
      out_K(13, 8) = -511085662.3;
      out_K(14, 8) = -342771898.7;
      out_K(18, 8) = 1536092.851;
      out_K(3, 9) = -1500000.;
      out_K(4, 9) = -1500000.;
      out_K(9, 9) = 3548123.801;
      out_K(10, 9) = -475938.1000;
      out_K(11, 9) = -1536092.851;
      out_K(15, 9) = -2048123.801;
      out_K(16, 9) = 1024061.900;
      out_K(17, 9) = -1536092.851;
      out_K(3, 10) = 1500000.;
      out_K(4, 10) = 1000000.;
      out_K(9, 10) = -475938.1000;
      out_K(10, 10) = 3066731.146;
      out_K(11, 10) = -768046.4255;
      out_K(15, 10) = -1024061.900;
      out_K(16, 10) = -42669.24580;
      out_K(17, 10) = -768046.4252;
      out_K(5, 11) = -500000.;
      out_K(9, 11) = -1536092.851;
      out_K(10, 11) = -768046.4252;
      out_K(11, 11) = 2206769.834;
      out_K(15, 11) = 1536092.851;
      out_K(16, 11) = -768046.4252;
      out_K(17, 11) = 597369.4417;
      out_K(1, 12) = -1500000.;
      out_K(6, 12) = 1000000.;
      out_K(7, 12) = 475938.1000;
      out_K(8, 12) = 1536092.851;
      out_K(12, 12) = 4218800.784;
      out_K(13, 12) = 1024061.900;
      out_K(14, 12) = -1536092.851;
      out_K(18, 12) = 1109400.392;
      out_K(7, 13) = -768676617.5;
      out_K(8, 13) = -511085662.3;
      out_K(12, 13) = 1024061.900;
      out_K(13, 13) = 1537353235.;
      out_K(18, 13) = 2048123.801;
      out_K(19, 13) = -768676617.5;
      out_K(20, 13) = 511085662.3;
      out_K(24, 13) = 1024061.900;
      out_K(7, 14) = -511085662.3;
      out_K(8, 14) = -342771898.7;
      out_K(12, 14) = -1536092.851;
      out_K(14, 14) = 685543797.4;
      out_K(19, 14) = 511085662.3;
      out_K(20, 14) = -342771898.7;
      out_K(24, 14) = 1536092.851;
      out_K(9, 15) = -2048123.801;
      out_K(10, 15) = -1024061.900;
      out_K(11, 15) = 1536092.851;
      out_K(15, 15) = 4096247.600;
      out_K(16, 15) = -2048123.801;
      out_K(21, 15) = -2048123.801;
      out_K(22, 15) = -1024061.900;
      out_K(23, 15) = -1536092.851;
      out_K(9, 16) = 1024061.900;
      out_K(10, 16) = -42669.24580;
      out_K(11, 16) = -768046.4252;
      out_K(15, 16) = -2048123.801;
      out_K(16, 16) = 2133462.292;
      out_K(21, 16) = 1024061.900;
      out_K(22, 16) = -42669.24580;
      out_K(23, 16) = 768046.4252;
      out_K(9, 17) = -1536092.851;
      out_K(10, 17) = -768046.4252;
      out_K(11, 17) = 597369.4417;
      out_K(17, 17) = 3413539.668;
      out_K(21, 17) = 1536092.851;
      out_K(22, 17) = 768046.4252;
      out_K(23, 17) = 597369.4417;
      out_K(7, 18) = -1024061.900;
      out_K(8, 18) = 1536092.851;
      out_K(12, 18) = 1109400.392;
      out_K(13, 18) = 2048123.801;
      out_K(18, 18) = 4437601.566;
      out_K(19, 18) = -1024061.900;
      out_K(20, 18) = -1536092.851;
      out_K(24, 18) = 1109400.392;
      out_K(13, 19) = -768676617.5;
      out_K(14, 19) = 511085662.3;
      out_K(18, 19) = -1024061.900;
      out_K(19, 19) = 770176617.5;
      out_K(20, 19) = -511085662.3;
      out_K(24, 19) = 475938.1000;
      out_K(25, 19) = -1500000.;
      out_K(30, 19) = 1500000.;
      out_K(13, 20) = 511085662.3;
      out_K(14, 20) = -342771898.7;
      out_K(18, 20) = -1536092.851;
      out_K(19, 20) = -511085662.3;
      out_K(20, 20) = 1342771899.;
      out_K(24, 20) = -1536092.851;
      out_K(26, 20) = -1000000000.;
      out_K(15, 21) = -2048123.801;
      out_K(16, 21) = 1024061.900;
      out_K(17, 21) = 1536092.851;
      out_K(21, 21) = 3548123.801;
      out_K(22, 21) = -475938.1000;
      out_K(23, 21) = 1536092.851;
      out_K(27, 21) = -1500000.;
      out_K(28, 21) = -1500000.;
      out_K(15, 22) = -1024061.900;
      out_K(16, 22) = -42669.24580;
      out_K(17, 22) = 768046.4252;
      out_K(21, 22) = -475938.1000;
      out_K(22, 22) = 3066731.146;
      out_K(23, 22) = 768046.4255;
      out_K(27, 22) = 1500000.;
      out_K(28, 22) = 1000000.;
      out_K(15, 23) = -1536092.851;
      out_K(16, 23) = 768046.4252;
      out_K(17, 23) = 597369.4417;
      out_K(21, 23) = 1536092.851;
      out_K(22, 23) = 768046.4252;
      out_K(23, 23) = 2206769.834;
      out_K(29, 23) = -500000.;
      out_K(13, 24) = 1024061.900;
      out_K(14, 24) = 1536092.851;
      out_K(18, 24) = 1109400.392;
      out_K(19, 24) = 475938.1000;
      out_K(20, 24) = -1536092.851;
      out_K(24, 24) = 4218800.784;
      out_K(25, 24) = -1500000.;
      out_K(30, 24) = 1000000.;
      out_K(19, 25) = -1500000.;
      out_K(24, 25) = -1500000.;
      out_K(25, 25) = 1500000.;
      out_K(30, 25) = -1500000.;
      out_K(20, 26) = -1000000000.;
      out_K(26, 26) = 1000000000.;
      out_K(21, 27) = -1500000.;
      out_K(22, 27) = 1500000.;
      out_K(27, 27) = 1500000.;
      out_K(28, 27) = 1500000.;
      out_K(21, 28) = -1500000.;
      out_K(22, 28) = 1000000.;
      out_K(27, 28) = 1500000.;
      out_K(28, 28) = 2000000.;
      out_K(23, 29) = -500000.;
      out_K(29, 29) = 500000.;
      out_K(19, 30) = 1500000.;
      out_K(24, 30) = 1000000.;
      out_K(25, 30) = -1500000.;
      out_K(30, 30) = 2000000.;
    end % K
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_ff = K_ff( ~, ~, ~ )
      % Evaluate the stiffness matrix K_ff.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_ff = sparse(24, 24);
      out_K_ff(1, 1) = 2000000.;
      out_K_ff(6, 1) = -1500000.;
      out_K_ff(7, 1) = 1000000.;
      out_K_ff(2, 2) = 500000.;
      out_K_ff(8, 2) = -500000.;
      out_K_ff(3, 3) = 2000000.;
      out_K_ff(4, 3) = 1500000.;
      out_K_ff(9, 3) = 1000000.;
      out_K_ff(3, 4) = 1500000.;
      out_K_ff(4, 4) = 770176617.5;
      out_K_ff(5, 4) = 511085662.3;
      out_K_ff(9, 4) = 475938.1000;
      out_K_ff(10, 4) = -768676617.5;
      out_K_ff(11, 4) = -511085662.3;
      out_K_ff(15, 4) = -1024061.900;
      out_K_ff(4, 5) = 511085662.3;
      out_K_ff(5, 5) = 1342771899.;
      out_K_ff(9, 5) = 1536092.851;
      out_K_ff(10, 5) = -511085662.3;
      out_K_ff(11, 5) = -342771898.7;
      out_K_ff(15, 5) = 1536092.851;
      out_K_ff(1, 6) = -1500000.;
      out_K_ff(6, 6) = 3548123.801;
      out_K_ff(7, 6) = -475938.1000;
      out_K_ff(8, 6) = -1536092.851;
      out_K_ff(12, 6) = -2048123.801;
      out_K_ff(13, 6) = 1024061.900;
      out_K_ff(14, 6) = -1536092.851;
      out_K_ff(1, 7) = 1000000.;
      out_K_ff(6, 7) = -475938.1000;
      out_K_ff(7, 7) = 3066731.146;
      out_K_ff(8, 7) = -768046.4255;
      out_K_ff(12, 7) = -1024061.900;
      out_K_ff(13, 7) = -42669.24580;
      out_K_ff(14, 7) = -768046.4252;
      out_K_ff(2, 8) = -500000.;
      out_K_ff(6, 8) = -1536092.851;
      out_K_ff(7, 8) = -768046.4252;
      out_K_ff(8, 8) = 2206769.834;
      out_K_ff(12, 8) = 1536092.851;
      out_K_ff(13, 8) = -768046.4252;
      out_K_ff(14, 8) = 597369.4417;
      out_K_ff(3, 9) = 1000000.;
      out_K_ff(4, 9) = 475938.1000;
      out_K_ff(5, 9) = 1536092.851;
      out_K_ff(9, 9) = 4218800.784;
      out_K_ff(10, 9) = 1024061.900;
      out_K_ff(11, 9) = -1536092.851;
      out_K_ff(15, 9) = 1109400.392;
      out_K_ff(4, 10) = -768676617.5;
      out_K_ff(5, 10) = -511085662.3;
      out_K_ff(9, 10) = 1024061.900;
      out_K_ff(10, 10) = 1537353235.;
      out_K_ff(15, 10) = 2048123.801;
      out_K_ff(16, 10) = -768676617.5;
      out_K_ff(17, 10) = 511085662.3;
      out_K_ff(21, 10) = 1024061.900;
      out_K_ff(4, 11) = -511085662.3;
      out_K_ff(5, 11) = -342771898.7;
      out_K_ff(9, 11) = -1536092.851;
      out_K_ff(11, 11) = 685543797.4;
      out_K_ff(16, 11) = 511085662.3;
      out_K_ff(17, 11) = -342771898.7;
      out_K_ff(21, 11) = 1536092.851;
      out_K_ff(6, 12) = -2048123.801;
      out_K_ff(7, 12) = -1024061.900;
      out_K_ff(8, 12) = 1536092.851;
      out_K_ff(12, 12) = 4096247.600;
      out_K_ff(13, 12) = -2048123.801;
      out_K_ff(18, 12) = -2048123.801;
      out_K_ff(19, 12) = -1024061.900;
      out_K_ff(20, 12) = -1536092.851;
      out_K_ff(6, 13) = 1024061.900;
      out_K_ff(7, 13) = -42669.24580;
      out_K_ff(8, 13) = -768046.4252;
      out_K_ff(12, 13) = -2048123.801;
      out_K_ff(13, 13) = 2133462.292;
      out_K_ff(18, 13) = 1024061.900;
      out_K_ff(19, 13) = -42669.24580;
      out_K_ff(20, 13) = 768046.4252;
      out_K_ff(6, 14) = -1536092.851;
      out_K_ff(7, 14) = -768046.4252;
      out_K_ff(8, 14) = 597369.4417;
      out_K_ff(14, 14) = 3413539.668;
      out_K_ff(18, 14) = 1536092.851;
      out_K_ff(19, 14) = 768046.4252;
      out_K_ff(20, 14) = 597369.4417;
      out_K_ff(4, 15) = -1024061.900;
      out_K_ff(5, 15) = 1536092.851;
      out_K_ff(9, 15) = 1109400.392;
      out_K_ff(10, 15) = 2048123.801;
      out_K_ff(15, 15) = 4437601.566;
      out_K_ff(16, 15) = -1024061.900;
      out_K_ff(17, 15) = -1536092.851;
      out_K_ff(21, 15) = 1109400.392;
      out_K_ff(10, 16) = -768676617.5;
      out_K_ff(11, 16) = 511085662.3;
      out_K_ff(15, 16) = -1024061.900;
      out_K_ff(16, 16) = 770176617.5;
      out_K_ff(17, 16) = -511085662.3;
      out_K_ff(21, 16) = 475938.1000;
      out_K_ff(24, 16) = 1500000.;
      out_K_ff(10, 17) = 511085662.3;
      out_K_ff(11, 17) = -342771898.7;
      out_K_ff(15, 17) = -1536092.851;
      out_K_ff(16, 17) = -511085662.3;
      out_K_ff(17, 17) = 1342771899.;
      out_K_ff(21, 17) = -1536092.851;
      out_K_ff(12, 18) = -2048123.801;
      out_K_ff(13, 18) = 1024061.900;
      out_K_ff(14, 18) = 1536092.851;
      out_K_ff(18, 18) = 3548123.801;
      out_K_ff(19, 18) = -475938.1000;
      out_K_ff(20, 18) = 1536092.851;
      out_K_ff(22, 18) = -1500000.;
      out_K_ff(12, 19) = -1024061.900;
      out_K_ff(13, 19) = -42669.24580;
      out_K_ff(14, 19) = 768046.4252;
      out_K_ff(18, 19) = -475938.1000;
      out_K_ff(19, 19) = 3066731.146;
      out_K_ff(20, 19) = 768046.4255;
      out_K_ff(22, 19) = 1000000.;
      out_K_ff(12, 20) = -1536092.851;
      out_K_ff(13, 20) = 768046.4252;
      out_K_ff(14, 20) = 597369.4417;
      out_K_ff(18, 20) = 1536092.851;
      out_K_ff(19, 20) = 768046.4252;
      out_K_ff(20, 20) = 2206769.834;
      out_K_ff(23, 20) = -500000.;
      out_K_ff(10, 21) = 1024061.900;
      out_K_ff(11, 21) = 1536092.851;
      out_K_ff(15, 21) = 1109400.392;
      out_K_ff(16, 21) = 475938.1000;
      out_K_ff(17, 21) = -1536092.851;
      out_K_ff(21, 21) = 4218800.784;
      out_K_ff(24, 21) = 1000000.;
      out_K_ff(18, 22) = -1500000.;
      out_K_ff(19, 22) = 1000000.;
      out_K_ff(22, 22) = 2000000.;
      out_K_ff(20, 23) = -500000.;
      out_K_ff(23, 23) = 500000.;
      out_K_ff(16, 24) = 1500000.;
      out_K_ff(21, 24) = 1000000.;
      out_K_ff(24, 24) = 2000000.;
    end % K_ff
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_fs = K_fs( ~, ~, ~ )
      % Evaluate the stiffness matrix K_fs.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_fs = sparse(24, 6);
      out_K_fs(3, 1) = -1500000.;
      out_K_fs(4, 1) = -1500000.;
      out_K_fs(9, 1) = -1500000.;
      out_K_fs(5, 2) = -1000000000.;
      out_K_fs(1, 3) = 1500000.;
      out_K_fs(6, 3) = -1500000.;
      out_K_fs(7, 3) = 1500000.;
      out_K_fs(16, 4) = -1500000.;
      out_K_fs(21, 4) = -1500000.;
      out_K_fs(24, 4) = -1500000.;
      out_K_fs(17, 5) = -1000000000.;
      out_K_fs(18, 6) = -1500000.;
      out_K_fs(19, 6) = 1500000.;
      out_K_fs(22, 6) = 1500000.;
    end % K_fs
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_sf = K_sf( ~, ~, ~ )
      % Evaluate the stiffness matrix K_sf.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_sf = sparse(6, 24);
      out_K_sf(3, 1) = 1500000.;
      out_K_sf(1, 3) = -1500000.;
      out_K_sf(1, 4) = -1500000.;
      out_K_sf(2, 5) = -1000000000.;
      out_K_sf(3, 6) = -1500000.;
      out_K_sf(3, 7) = 1500000.;
      out_K_sf(1, 9) = -1500000.;
      out_K_sf(4, 16) = -1500000.;
      out_K_sf(5, 17) = -1000000000.;
      out_K_sf(6, 18) = -1500000.;
      out_K_sf(6, 19) = 1500000.;
      out_K_sf(4, 21) = -1500000.;
      out_K_sf(6, 22) = 1500000.;
      out_K_sf(4, 24) = -1500000.;
    end % K_sf
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_ss = K_ss( ~, ~, ~ )
      % Evaluate the stiffness matrix K_ss.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_ss = sparse(6, 6);
      out_K_ss(1, 1) = 1500000.;
      out_K_ss(2, 2) = 1000000000.;
      out_K_ss(3, 3) = 1500000.;
      out_K_ss(4, 4) = 1500000.;
      out_K_ss(5, 5) = 1000000000.;
      out_K_ss(6, 6) = 1500000.;
    end % K_ss
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d = d( ~, ~, ~ )
      % Evaluate the deformation vector d.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_d = sparse(30, 1);
      out_d(6) = .00313421443370003;
      out_d(7) = -.00285565559104368;
      out_d(8) = -9.99999999700009e-006;
      out_d(12) = -.00198494548083454;
      out_d(13) = -4.1224326634258e-016;
      out_d(14) = -.00430595802688464;
      out_d(18) = -4.86627042234111e-017;
      out_d(19) = .00285565559104286;
      out_d(20) = -9.99999999699972e-006;
      out_d(24) = .00198494548083474;
      out_d(30) = -.00313421443369951;
    end % d
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d_f = d_f( ~, ~, ~ )
      % Evaluate the deformation vector d_f.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_d_f = sparse(24, 1);
      out_d_f(3) = .00313421443370003;
      out_d_f(4) = -.00285565559104368;
      out_d_f(5) = -9.99999999700009e-006;
      out_d_f(9) = -.00198494548083454;
      out_d_f(10) = -4.1224326634258e-016;
      out_d_f(11) = -.00430595802688464;
      out_d_f(15) = -4.86627042234111e-017;
      out_d_f(16) = .00285565559104286;
      out_d_f(17) = -9.99999999699972e-006;
      out_d_f(21) = .00198494548083474;
      out_d_f(24) = -.00313421443369951;
    end % d_f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d_s = d_s( ~, ~, ~ )
      % Evaluate the deformation vector d_s.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_d_s = sparse(6, 1);
    end % d_s
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( ~, ~, ~ )
      % Evaluate the force vector f.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f = sparse(30, 1);
      out_f(1) = 2559.57995726728;
      out_f(2) = 9999.99999700009;
      out_f(14) = -20000;
      out_f(25) = -2559.57995726712;
      out_f(26) = 9999.99999699972;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_f = f_f( ~, ~, ~ )
      % Evaluate the force vector f_f.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f_f = sparse(24, 1);
      out_f_f(11) = -20000;
    end % f_f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_s = f_s( ~, ~, ~ )
      % Evaluate the force vector f_s.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f_s = zeros(6, 1);
      out_f_s(1) = 2559.57995726728;
      out_f_s(2) = 9999.99999700009;
      out_f_s(4) = -2559.57995726712;
      out_f_s(5) = 9999.99999699972;
    end % f_s
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_r = f_r( ~, ~, ~ )
      % Evaluate the force vector f_r.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f_r = sparse(6, 1);
    end % f_r
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_perm = perm( ~ )
      % Evaluate the permutation vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_perm = zeros(30, 1);
      out_perm(1) = 4;
      out_perm(2) = 5;
      out_perm(3) = 6;
      out_perm(4) = 7;
      out_perm(5) = 8;
      out_perm(6) = 9;
      out_perm(7) = 10;
      out_perm(8) = 11;
      out_perm(9) = 12;
      out_perm(10) = 13;
      out_perm(11) = 14;
      out_perm(12) = 15;
      out_perm(13) = 16;
      out_perm(14) = 17;
      out_perm(15) = 18;
      out_perm(16) = 19;
      out_perm(17) = 20;
      out_perm(18) = 21;
      out_perm(19) = 22;
      out_perm(20) = 23;
      out_perm(21) = 24;
      out_perm(22) = 28;
      out_perm(23) = 29;
      out_perm(24) = 30;
      out_perm(25) = 1;
      out_perm(26) = 2;
      out_perm(27) = 3;
      out_perm(28) = 25;
      out_perm(29) = 26;
      out_perm(30) = 27;
    end % perm
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_unperm = unperm( ~ )
      % Evaluate the unpermutation vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_unperm = zeros(30, 1);
      out_unperm(1) = 25;
      out_unperm(2) = 26;
      out_unperm(3) = 27;
      out_unperm(4) = 1;
      out_unperm(5) = 2;
      out_unperm(6) = 3;
      out_unperm(7) = 4;
      out_unperm(8) = 5;
      out_unperm(9) = 6;
      out_unperm(10) = 7;
      out_unperm(11) = 8;
      out_unperm(12) = 9;
      out_unperm(13) = 10;
      out_unperm(14) = 11;
      out_unperm(15) = 12;
      out_unperm(16) = 13;
      out_unperm(17) = 14;
      out_unperm(18) = 15;
      out_unperm(19) = 16;
      out_unperm(20) = 17;
      out_unperm(21) = 18;
      out_unperm(22) = 19;
      out_unperm(23) = 20;
      out_unperm(24) = 21;
      out_unperm(25) = 28;
      out_unperm(26) = 29;
      out_unperm(27) = 30;
      out_unperm(28) = 22;
      out_unperm(29) = 23;
      out_unperm(30) = 24;
    end % unperm
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~ )
      % Evaluate the veiling vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Test_08

% That's All Folks!
