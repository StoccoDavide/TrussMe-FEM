% +--------------------------------------------------------------------------+
% | 'TrussMe' module version 0.0 - BSD 3-Clause License - Copyright (c) 2023 |
% | Current version authors:                                                 |
% |   Davide Stocco and Matteo Larcher.                                      |
% +--------------------------------------------------------------------------+

% Matlab generated code for system: Test_03
% This file has been automatically generated by TrussMe.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Test_03 < TrussMe.System
  %
  % Test_03 class
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Test_03( varargin )
      % Class constructor.

      % User data
      if (nargin == 0)
        data = [];
      elseif (nargin == 1 && isstruct(varargin{1}))
        data = varargin{1};
      else
        error('wrong number of input arguments.');
      end

      % Call superclass constructor
      this = this@TrussMe.System(data);
    end % Test_03
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K = K( ~, ~, ~ )
      % Evaluate the stiffness matrix K.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K = sparse(24, 24);
      out_K(1, 1) = .8888888888e11;
      out_K(6, 1) = -.1333333333e12;
      out_K(7, 1) = -.8888888888e11;
      out_K(12, 1) = -.1333333333e12;
      out_K(2, 2) = 2666666.667;
      out_K(8, 2) = -2666666.667;
      out_K(3, 3) = .8888888888e11;
      out_K(4, 3) = .1333333333e12;
      out_K(9, 3) = -.8888888888e11;
      out_K(10, 3) = .1333333333e12;
      out_K(3, 4) = .1333333333e12;
      out_K(4, 4) = .2666666667e12;
      out_K(9, 4) = -.1333333333e12;
      out_K(10, 4) = .1333333333e12;
      out_K(5, 5) = .6666666667e11;
      out_K(11, 5) = -.6666666667e11;
      out_K(1, 6) = -.1333333333e12;
      out_K(6, 6) = .2666666667e12;
      out_K(7, 6) = .1333333333e12;
      out_K(12, 6) = .1333333333e12;
      out_K(1, 7) = -.8888888888e11;
      out_K(6, 7) = .1333333333e12;
      out_K(7, 7) = .9063032454e11;
      out_K(8, 7) = -2317109942.;
      out_K(12, 7) = .1333333333e12;
      out_K(13, 7) = -1739435663.;
      out_K(14, 7) = 2317109942.;
      out_K(18, 7) = .1445777326e11;
      out_K(19, 7) = -2000000.;
      out_K(2, 8) = -2666666.667;
      out_K(7, 8) = -2317109942.;
      out_K(8, 8) = .1246874980e11;
      out_K(13, 8) = 2317109942.;
      out_K(14, 8) = -3091083129.;
      out_K(18, 8) = -.1927703102e11;
      out_K(20, 8) = -9375000000.;
      out_K(24, 8) = -.3750000000e11;
      out_K(3, 9) = -.8888888888e11;
      out_K(4, 9) = -.1333333333e12;
      out_K(9, 9) = .1457045512e12;
      out_K(10, 9) = -.1622488798e12;
      out_K(11, 9) = .1135540620e12;
      out_K(15, 9) = -.1931566234e11;
      out_K(16, 9) = -.2891554652e11;
      out_K(17, 9) = .3855406203e11;
      out_K(21, 9) = -.3750000000e11;
      out_K(23, 9) = .7500000000e11;
      out_K(3, 10) = .1333333333e12;
      out_K(4, 10) = .1333333333e12;
      out_K(9, 10) = -.1622488798e12;
      out_K(10, 10) = .4000334002e12;
      out_K(11, 10) = -.5771543087e11;
      out_K(15, 10) = .2891554652e11;
      out_K(16, 10) = 3206412826.;
      out_K(17, 10) = -.5771543086e11;
      out_K(22, 10) = -.5000000000e11;
      out_K(5, 11) = -.6666666667e11;
      out_K(9, 11) = .1135540620e12;
      out_K(10, 11) = -.5771543087e11;
      out_K(11, 11) = .3837007348e12;
      out_K(15, 11) = -.3855406203e11;
      out_K(16, 11) = -.5771543086e11;
      out_K(17, 11) = .3687374749e11;
      out_K(21, 11) = -.7500000000e11;
      out_K(23, 11) = .1000000000e12;
      out_K(1, 12) = -.1333333333e12;
      out_K(6, 12) = .1333333333e12;
      out_K(7, 12) = .1333333333e12;
      out_K(12, 12) = .2666666667e12;
      out_K(7, 13) = -1739435663.;
      out_K(8, 13) = 2317109942.;
      out_K(13, 13) = 1739435663.;
      out_K(14, 13) = -2317109942.;
      out_K(18, 13) = -.1445777326e11;
      out_K(7, 14) = 2317109942.;
      out_K(8, 14) = -3091083129.;
      out_K(13, 14) = -2317109942.;
      out_K(14, 14) = 3091083129.;
      out_K(18, 14) = .1927703102e11;
      out_K(9, 15) = -.1931566234e11;
      out_K(10, 15) = .2891554652e11;
      out_K(11, 15) = -.3855406203e11;
      out_K(15, 15) = .1931566234e11;
      out_K(16, 15) = .2891554652e11;
      out_K(17, 15) = -.3855406203e11;
      out_K(9, 16) = -.2891554652e11;
      out_K(10, 16) = 3206412826.;
      out_K(11, 16) = -.5771543086e11;
      out_K(15, 16) = .2891554652e11;
      out_K(16, 16) = .8336673347e11;
      out_K(17, 16) = -.5771543087e11;
      out_K(9, 17) = .3855406203e11;
      out_K(10, 17) = -.5771543086e11;
      out_K(11, 17) = .3687374749e11;
      out_K(15, 17) = -.3855406203e11;
      out_K(16, 17) = -.5771543087e11;
      out_K(17, 17) = .1170340681e12;
      out_K(7, 18) = .1445777326e11;
      out_K(8, 18) = -.1927703102e11;
      out_K(13, 18) = -.1445777326e11;
      out_K(14, 18) = .1927703102e11;
      out_K(18, 18) = .1202404810e12;
      out_K(7, 19) = -2000000.;
      out_K(19, 19) = 2000000.;
      out_K(8, 20) = -9375000000.;
      out_K(20, 20) = 9375000000.;
      out_K(24, 20) = .3750000000e11;
      out_K(9, 21) = -.3750000000e11;
      out_K(11, 21) = -.7500000000e11;
      out_K(21, 21) = .3750000000e11;
      out_K(23, 21) = -.7500000000e11;
      out_K(10, 22) = -.5000000000e11;
      out_K(22, 22) = .5000000000e11;
      out_K(9, 23) = .7500000000e11;
      out_K(11, 23) = .1000000000e12;
      out_K(21, 23) = -.7500000000e11;
      out_K(23, 23) = .2000000000e12;
      out_K(8, 24) = -.3750000000e11;
      out_K(20, 24) = .3750000000e11;
      out_K(24, 24) = .1500000000e12;
    end % K
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_ff = K_ff( ~, ~, ~ )
      % Evaluate the stiffness matrix K_ff.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_ff = sparse(9, 9);
      out_K_ff(1, 1) = .2666666667e12;
      out_K_ff(2, 1) = .1333333333e12;
      out_K_ff(7, 1) = .1333333333e12;
      out_K_ff(1, 2) = .1333333333e12;
      out_K_ff(2, 2) = .9063032454e11;
      out_K_ff(3, 2) = -2317109942.;
      out_K_ff(7, 2) = .1333333333e12;
      out_K_ff(8, 2) = .1445777326e11;
      out_K_ff(2, 3) = -2317109942.;
      out_K_ff(3, 3) = .1246874980e11;
      out_K_ff(8, 3) = -.1927703102e11;
      out_K_ff(9, 3) = -.3750000000e11;
      out_K_ff(4, 4) = .1457045512e12;
      out_K_ff(5, 4) = -.1622488798e12;
      out_K_ff(6, 4) = .1135540620e12;
      out_K_ff(4, 5) = -.1622488798e12;
      out_K_ff(5, 5) = .4000334002e12;
      out_K_ff(6, 5) = -.5771543087e11;
      out_K_ff(4, 6) = .1135540620e12;
      out_K_ff(5, 6) = -.5771543087e11;
      out_K_ff(6, 6) = .3837007348e12;
      out_K_ff(1, 7) = .1333333333e12;
      out_K_ff(2, 7) = .1333333333e12;
      out_K_ff(7, 7) = .2666666667e12;
      out_K_ff(2, 8) = .1445777326e11;
      out_K_ff(3, 8) = -.1927703102e11;
      out_K_ff(8, 8) = .1202404810e12;
      out_K_ff(3, 9) = -.3750000000e11;
      out_K_ff(9, 9) = .1500000000e12;
    end % K_ff
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_fs = K_fs( ~, ~, ~ )
      % Evaluate the stiffness matrix K_fs.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_fs = sparse(9, 15);
      out_K_fs(1, 1) = -.1333333333e12;
      out_K_fs(2, 1) = -.8888888888e11;
      out_K_fs(7, 1) = -.1333333333e12;
      out_K_fs(3, 2) = -2666666.667;
      out_K_fs(4, 3) = -.8888888888e11;
      out_K_fs(5, 3) = .1333333333e12;
      out_K_fs(4, 4) = -.1333333333e12;
      out_K_fs(5, 4) = .1333333333e12;
      out_K_fs(6, 5) = -.6666666667e11;
      out_K_fs(2, 6) = -1739435663.;
      out_K_fs(3, 6) = 2317109942.;
      out_K_fs(8, 6) = -.1445777326e11;
      out_K_fs(2, 7) = 2317109942.;
      out_K_fs(3, 7) = -3091083129.;
      out_K_fs(8, 7) = .1927703102e11;
      out_K_fs(4, 8) = -.1931566234e11;
      out_K_fs(5, 8) = .2891554652e11;
      out_K_fs(6, 8) = -.3855406203e11;
      out_K_fs(4, 9) = -.2891554652e11;
      out_K_fs(5, 9) = 3206412826.;
      out_K_fs(6, 9) = -.5771543086e11;
      out_K_fs(4, 10) = .3855406203e11;
      out_K_fs(5, 10) = -.5771543086e11;
      out_K_fs(6, 10) = .3687374749e11;
      out_K_fs(2, 11) = -2000000.;
      out_K_fs(3, 12) = -9375000000.;
      out_K_fs(9, 12) = .3750000000e11;
      out_K_fs(4, 13) = -.3750000000e11;
      out_K_fs(6, 13) = -.7500000000e11;
      out_K_fs(5, 14) = -.5000000000e11;
      out_K_fs(4, 15) = .7500000000e11;
      out_K_fs(6, 15) = .1000000000e12;
    end % K_fs
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_sf = K_sf( ~, ~, ~ )
      % Evaluate the stiffness matrix K_sf.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_sf = sparse(15, 9);
      out_K_sf(1, 1) = -.1333333333e12;
      out_K_sf(1, 2) = -.8888888888e11;
      out_K_sf(6, 2) = -1739435663.;
      out_K_sf(7, 2) = 2317109942.;
      out_K_sf(11, 2) = -2000000.;
      out_K_sf(2, 3) = -2666666.667;
      out_K_sf(6, 3) = 2317109942.;
      out_K_sf(7, 3) = -3091083129.;
      out_K_sf(12, 3) = -9375000000.;
      out_K_sf(3, 4) = -.8888888888e11;
      out_K_sf(4, 4) = -.1333333333e12;
      out_K_sf(8, 4) = -.1931566234e11;
      out_K_sf(9, 4) = -.2891554652e11;
      out_K_sf(10, 4) = .3855406203e11;
      out_K_sf(13, 4) = -.3750000000e11;
      out_K_sf(15, 4) = .7500000000e11;
      out_K_sf(3, 5) = .1333333333e12;
      out_K_sf(4, 5) = .1333333333e12;
      out_K_sf(8, 5) = .2891554652e11;
      out_K_sf(9, 5) = 3206412826.;
      out_K_sf(10, 5) = -.5771543086e11;
      out_K_sf(14, 5) = -.5000000000e11;
      out_K_sf(5, 6) = -.6666666667e11;
      out_K_sf(8, 6) = -.3855406203e11;
      out_K_sf(9, 6) = -.5771543086e11;
      out_K_sf(10, 6) = .3687374749e11;
      out_K_sf(13, 6) = -.7500000000e11;
      out_K_sf(15, 6) = .1000000000e12;
      out_K_sf(1, 7) = -.1333333333e12;
      out_K_sf(6, 8) = -.1445777326e11;
      out_K_sf(7, 8) = .1927703102e11;
      out_K_sf(12, 9) = .3750000000e11;
    end % K_sf
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_ss = K_ss( ~, ~, ~ )
      % Evaluate the stiffness matrix K_ss.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_K_ss = sparse(15, 15);
      out_K_ss(1, 1) = .8888888888e11;
      out_K_ss(2, 2) = 2666666.667;
      out_K_ss(3, 3) = .8888888888e11;
      out_K_ss(4, 3) = .1333333333e12;
      out_K_ss(3, 4) = .1333333333e12;
      out_K_ss(4, 4) = .2666666667e12;
      out_K_ss(5, 5) = .6666666667e11;
      out_K_ss(6, 6) = 1739435663.;
      out_K_ss(7, 6) = -2317109942.;
      out_K_ss(6, 7) = -2317109942.;
      out_K_ss(7, 7) = 3091083129.;
      out_K_ss(8, 8) = .1931566234e11;
      out_K_ss(9, 8) = .2891554652e11;
      out_K_ss(10, 8) = -.3855406203e11;
      out_K_ss(8, 9) = .2891554652e11;
      out_K_ss(9, 9) = .8336673347e11;
      out_K_ss(10, 9) = -.5771543087e11;
      out_K_ss(8, 10) = -.3855406203e11;
      out_K_ss(9, 10) = -.5771543087e11;
      out_K_ss(10, 10) = .1170340681e12;
      out_K_ss(11, 11) = 2000000.;
      out_K_ss(12, 12) = 9375000000.;
      out_K_ss(13, 13) = .3750000000e11;
      out_K_ss(15, 13) = -.7500000000e11;
      out_K_ss(14, 14) = .5000000000e11;
      out_K_ss(13, 15) = -.7500000000e11;
      out_K_ss(15, 15) = .2000000000e12;
    end % K_ss
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d = d( ~, ~, ~ )
      % Evaluate the deformation vector d.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_d = sparse(24, 1);
      out_d(6) = .00123351213921732;
      out_d(7) = -.0037005364185771;
      out_d(8) = -.00208158426219236;
      out_d(12) = .00123351213921732;
      out_d(18) = .000111233354822776;
      out_d(24) = -.00052039606554809;
    end % d
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d_f = d_f( ~, ~, ~ )
      % Evaluate the deformation vector d_f.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_d_f = zeros(9, 1);
      out_d_f(1) = .00123351213921732;
      out_d_f(2) = -.0037005364185771;
      out_d_f(3) = -.00208158426219236;
      out_d_f(7) = .00123351213921732;
      out_d_f(8) = .000111233354822776;
      out_d_f(9) = -.00052039606554809;
    end % d_f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d_s = d_s( ~, ~, ~ )
      % Evaluate the deformation vector d_s.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_d_s = sparse(15, 1);
    end % d_s
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( ~, ~, ~ )
      % Evaluate the force vector f.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f = sparse(24, 1);
      out_f(1) = .131574660539627;
      out_f(2) = 5550.89136654015;
      out_f(7) = -12800.;
      out_f(8) = -9600.;
      out_f(13) = 5398.80668983096;
      out_f(14) = 4049.0996139613;
      out_f(19) = 7401.07283715419;
      out_f(20) = -1.29181387809041e-011;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_f = f_f( ~, ~, ~ )
      % Evaluate the force vector f_f.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f_f = sparse(9, 1);
      out_f_f(2) = -12800.;
      out_f_f(3) = -9600.;
    end % f_f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_s = f_s( ~, ~, ~ )
      % Evaluate the force vector f_s.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f_s = sparse(15, 1);
      out_f_s(1) = .131574660539627;
      out_f_s(2) = 5550.89136654015;
      out_f_s(6) = 5398.80668983096;
      out_f_s(7) = 4049.0996139613;
      out_f_s(11) = 7401.07283715419;
      out_f_s(12) = -1.29181387809041e-011;
    end % f_s
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_r = f_r( ~, ~, ~ )
      % Evaluate the force vector f_r.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f_r = sparse(15, 1);
    end % f_r
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_perm = perm( ~ )
      % Evaluate the permutation vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_perm = zeros(24, 1);
      out_perm(1) = 6;
      out_perm(2) = 7;
      out_perm(3) = 8;
      out_perm(4) = 9;
      out_perm(5) = 10;
      out_perm(6) = 11;
      out_perm(7) = 12;
      out_perm(8) = 18;
      out_perm(9) = 24;
      out_perm(10) = 1;
      out_perm(11) = 2;
      out_perm(12) = 3;
      out_perm(13) = 4;
      out_perm(14) = 5;
      out_perm(15) = 13;
      out_perm(16) = 14;
      out_perm(17) = 15;
      out_perm(18) = 16;
      out_perm(19) = 17;
      out_perm(20) = 19;
      out_perm(21) = 20;
      out_perm(22) = 21;
      out_perm(23) = 22;
      out_perm(24) = 23;
    end % perm
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_unperm = unperm( ~ )
      % Evaluate the unpermutation vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_unperm = zeros(24, 1);
      out_unperm(1) = 10;
      out_unperm(2) = 11;
      out_unperm(3) = 12;
      out_unperm(4) = 13;
      out_unperm(5) = 14;
      out_unperm(6) = 1;
      out_unperm(7) = 2;
      out_unperm(8) = 3;
      out_unperm(9) = 4;
      out_unperm(10) = 5;
      out_unperm(11) = 6;
      out_unperm(12) = 7;
      out_unperm(13) = 15;
      out_unperm(14) = 16;
      out_unperm(15) = 17;
      out_unperm(16) = 18;
      out_unperm(17) = 19;
      out_unperm(18) = 8;
      out_unperm(19) = 20;
      out_unperm(20) = 21;
      out_unperm(21) = 22;
      out_unperm(22) = 23;
      out_unperm(23) = 24;
      out_unperm(24) = 9;
    end % unperm
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~ )
      % Evaluate the veiling vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Test_03

% That's All Folks!
