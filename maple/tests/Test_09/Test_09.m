% +--------------------------------------------------------------------------+
% | 'TrussMe' module version 0.0 - BSD 3-Clause License - Copyright (c) 2023 |
% | Current version authors:                                                 |
% |   Davide Stocco and Matteo Larcher.                                      |
% +--------------------------------------------------------------------------+

% Matlab generated code for system: Test_09
% This file has been automatically generated by TrussMe.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Test_09 < TrussMe.System
  %
  % Test_09 class
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Test_09( varargin )
      % Class constructor.

      % User data
      if (nargin == 0)
        data.F__x = 0;
        data.F__y = 1;
        data.F__z = 0;
        data.M__x = 0;
        data.M__y = 0;
        data.M__z = 1;
        data.I__x = .1;
        data.I__y = .1;
        data.I__z = .1;
        data.l = 1;
        data.E = 205000;
        data.A = 1;
      elseif (nargin == 1 && isstruct(varargin{1}))
        data = varargin{1};
      elseif (nargin == 12)
        data.F__x = varargin{1};
        data.F__y = varargin{2};
        data.F__z = varargin{3};
        data.M__x = varargin{4};
        data.M__y = varargin{5};
        data.M__z = varargin{6};
        data.I__x = varargin{7};
        data.I__y = varargin{8};
        data.I__z = varargin{9};
        data.l = varargin{10};
        data.E = varargin{11};
        data.A = varargin{12};
      else
        error('wrong number of input arguments.');
      end

      % Call superclass constructor
      this = this@TrussMe.System(data);
    end % Test_09
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K = K( this, ~, ~ )
      % Evaluate the stiffness matrix K.

      % Extract properties
      I__y = this.m_data.I__y;
      I__z = this.m_data.I__z;
      l = this.m_data.l;
      E = this.m_data.E;
      A = this.m_data.A;

      % Extract inputs
      % No inputs

      % Evaluate function
      t2 = 0.1e1 / l;
      out_1_1 = t2 * A * E;
      out_7_1 = -out_1_1;
      t3 = I__y * E;
      t4 = l ^ 2;
      t6 = 0.1e1 / t4 / l;
      out_2_2 = 12 * t6 * t3;
      t8 = 0.1e1 / t4;
      out_6_2 = 6 * t8 * t3;
      out_8_2 = -out_2_2;
      out_12_2 = out_6_2;
      t10 = I__z * E;
      out_3_3 = 12 * t6 * t10;
      t13 = 6 * t8 * t10;
      out_5_3 = -t13;
      out_9_3 = -out_3_3;
      out_11_3 = out_5_3;
      out_4_4 = t2 * (I__y + I__z) * G;
      out_10_4 = -out_4_4;
      out_3_5 = out_11_3;
      t16 = t2 * t10;
      out_5_5 = 4 * t16;
      out_9_5 = t13;
      out_11_5 = 2 * t16;
      out_2_6 = out_12_2;
      t17 = t2 * t3;
      out_6_6 = 4 * t17;
      out_8_6 = -out_2_6;
      out_12_6 = 2 * t17;
      out_1_7 = out_7_1;
      out_7_7 = out_1_1;
      out_2_8 = out_8_2;
      out_6_8 = out_8_6;
      out_8_8 = out_2_2;
      out_12_8 = out_6_8;
      out_3_9 = out_9_3;
      out_5_9 = out_9_5;
      out_9_9 = out_3_3;
      out_11_9 = out_5_9;
      out_4_10 = out_10_4;
      out_10_10 = out_4_4;
      out_3_11 = out_3_5;
      out_5_11 = out_11_5;
      out_9_11 = out_11_9;
      out_11_11 = out_5_5;
      out_2_12 = out_2_6;
      out_6_12 = out_12_6;
      out_8_12 = out_12_8;
      out_12_12 = out_6_6;

      % Store outputs
      out_K = sparse(12, 12);
      out_K(1, 1) = out_1_1;
      out_K(7, 1) = out_7_1;
      out_K(2, 2) = out_2_2;
      out_K(6, 2) = out_6_2;
      out_K(8, 2) = out_8_2;
      out_K(12, 2) = out_12_2;
      out_K(3, 3) = out_3_3;
      out_K(5, 3) = out_5_3;
      out_K(9, 3) = out_9_3;
      out_K(11, 3) = out_11_3;
      out_K(4, 4) = out_4_4;
      out_K(10, 4) = out_10_4;
      out_K(3, 5) = out_3_5;
      out_K(5, 5) = out_5_5;
      out_K(9, 5) = out_9_5;
      out_K(11, 5) = out_11_5;
      out_K(2, 6) = out_2_6;
      out_K(6, 6) = out_6_6;
      out_K(8, 6) = out_8_6;
      out_K(12, 6) = out_12_6;
      out_K(1, 7) = out_1_7;
      out_K(7, 7) = out_7_7;
      out_K(2, 8) = out_2_8;
      out_K(6, 8) = out_6_8;
      out_K(8, 8) = out_8_8;
      out_K(12, 8) = out_12_8;
      out_K(3, 9) = out_3_9;
      out_K(5, 9) = out_5_9;
      out_K(9, 9) = out_9_9;
      out_K(11, 9) = out_11_9;
      out_K(4, 10) = out_4_10;
      out_K(10, 10) = out_10_10;
      out_K(3, 11) = out_3_11;
      out_K(5, 11) = out_5_11;
      out_K(9, 11) = out_9_11;
      out_K(11, 11) = out_11_11;
      out_K(2, 12) = out_2_12;
      out_K(6, 12) = out_6_12;
      out_K(8, 12) = out_8_12;
      out_K(12, 12) = out_12_12;
    end % K
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_ff = K_ff( this, ~, ~ )
      % Evaluate the stiffness matrix K_ff.

      % Extract properties
      I__y = this.m_data.I__y;
      I__z = this.m_data.I__z;
      l = this.m_data.l;
      E = this.m_data.E;
      A = this.m_data.A;

      % Extract inputs
      % No inputs

      % Evaluate function
      t2 = 0.1e1 / l;
      out_1_1 = t2 * A * E;
      t3 = I__y * E;
      t4 = l ^ 2;
      t6 = 0.1e1 / t4 / l;
      out_2_2 = 12 * t6 * t3;
      t8 = 0.1e1 / t4;
      out_6_2 = -6 * t8 * t3;
      t11 = I__z * E;
      out_3_3 = 12 * t6 * t11;
      out_5_3 = 6 * t8 * t11;
      out_4_4 = t2 * (I__y + I__z) * G;
      out_3_5 = out_5_3;
      out_5_5 = 4 * t2 * t11;
      out_2_6 = out_6_2;
      out_6_6 = 4 * t2 * t3;

      % Store outputs
      out_K_ff = sparse(6, 6);
      out_K_ff(1, 1) = out_1_1;
      out_K_ff(2, 2) = out_2_2;
      out_K_ff(6, 2) = out_6_2;
      out_K_ff(3, 3) = out_3_3;
      out_K_ff(5, 3) = out_5_3;
      out_K_ff(4, 4) = out_4_4;
      out_K_ff(3, 5) = out_3_5;
      out_K_ff(5, 5) = out_5_5;
      out_K_ff(2, 6) = out_2_6;
      out_K_ff(6, 6) = out_6_6;
    end % K_ff
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_fs = K_fs( this, ~, ~ )
      % Evaluate the stiffness matrix K_fs.

      % Extract properties
      I__y = this.m_data.I__y;
      I__z = this.m_data.I__z;
      l = this.m_data.l;
      E = this.m_data.E;
      A = this.m_data.A;

      % Extract inputs
      % No inputs

      % Evaluate function
      t2 = 0.1e1 / l;
      out_1_1 = -t2 * A * E;
      t4 = I__y * E;
      t5 = l ^ 2;
      t7 = 0.1e1 / t5 / l;
      out_2_2 = -12 * t7 * t4;
      t10 = 0.1e1 / t5;
      out_6_2 = 6 * t10 * t4;
      t12 = I__z * E;
      out_3_3 = -12 * t7 * t12;
      t16 = 6 * t10 * t12;
      out_5_3 = -t16;
      out_4_4 = -t2 * (I__y + I__z) * G;
      out_3_5 = t16;
      out_5_5 = 2 * t2 * t12;
      out_2_6 = -out_6_2;
      out_6_6 = 2 * t2 * t4;

      % Store outputs
      out_K_fs = sparse(6, 6);
      out_K_fs(1, 1) = out_1_1;
      out_K_fs(2, 2) = out_2_2;
      out_K_fs(6, 2) = out_6_2;
      out_K_fs(3, 3) = out_3_3;
      out_K_fs(5, 3) = out_5_3;
      out_K_fs(4, 4) = out_4_4;
      out_K_fs(3, 5) = out_3_5;
      out_K_fs(5, 5) = out_5_5;
      out_K_fs(2, 6) = out_2_6;
      out_K_fs(6, 6) = out_6_6;
    end % K_fs
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_sf = K_sf( this, ~, ~ )
      % Evaluate the stiffness matrix K_sf.

      % Extract properties
      I__y = this.m_data.I__y;
      I__z = this.m_data.I__z;
      l = this.m_data.l;
      E = this.m_data.E;
      A = this.m_data.A;

      % Extract inputs
      % No inputs

      % Evaluate function
      t2 = 0.1e1 / l;
      out_1_1 = -t2 * A * E;
      t4 = I__y * E;
      t5 = l ^ 2;
      t7 = 0.1e1 / t5 / l;
      out_2_2 = -12 * t7 * t4;
      t10 = 0.1e1 / t5;
      t12 = 6 * t10 * t4;
      out_6_2 = -t12;
      t13 = I__z * E;
      out_3_3 = -12 * t7 * t13;
      out_5_3 = 6 * t10 * t13;
      out_4_4 = -t2 * (I__y + I__z) * G;
      out_3_5 = -out_5_3;
      out_5_5 = 2 * t2 * t13;
      out_2_6 = t12;
      out_6_6 = 2 * t2 * t4;

      % Store outputs
      out_K_sf = sparse(6, 6);
      out_K_sf(1, 1) = out_1_1;
      out_K_sf(2, 2) = out_2_2;
      out_K_sf(6, 2) = out_6_2;
      out_K_sf(3, 3) = out_3_3;
      out_K_sf(5, 3) = out_5_3;
      out_K_sf(4, 4) = out_4_4;
      out_K_sf(3, 5) = out_3_5;
      out_K_sf(5, 5) = out_5_5;
      out_K_sf(2, 6) = out_2_6;
      out_K_sf(6, 6) = out_6_6;
    end % K_sf
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_K_ss = K_ss( this, ~, ~ )
      % Evaluate the stiffness matrix K_ss.

      % Extract properties
      I__y = this.m_data.I__y;
      I__z = this.m_data.I__z;
      l = this.m_data.l;
      E = this.m_data.E;
      A = this.m_data.A;

      % Extract inputs
      % No inputs

      % Evaluate function
      t2 = 0.1e1 / l;
      out_1_1 = t2 * A * E;
      t3 = I__y * E;
      t4 = l ^ 2;
      t6 = 0.1e1 / t4 / l;
      out_2_2 = 12 * t6 * t3;
      t8 = 0.1e1 / t4;
      out_6_2 = 6 * t8 * t3;
      t10 = I__z * E;
      out_3_3 = 12 * t6 * t10;
      out_5_3 = -6 * t8 * t10;
      out_4_4 = t2 * (I__y + I__z) * G;
      out_3_5 = out_5_3;
      out_5_5 = 4 * t2 * t10;
      out_2_6 = out_6_2;
      out_6_6 = 4 * t2 * t3;

      % Store outputs
      out_K_ss = sparse(6, 6);
      out_K_ss(1, 1) = out_1_1;
      out_K_ss(2, 2) = out_2_2;
      out_K_ss(6, 2) = out_6_2;
      out_K_ss(3, 3) = out_3_3;
      out_K_ss(5, 3) = out_5_3;
      out_K_ss(4, 4) = out_4_4;
      out_K_ss(3, 5) = out_3_5;
      out_K_ss(5, 5) = out_5_5;
      out_K_ss(2, 6) = out_2_6;
      out_K_ss(6, 6) = out_6_6;
    end % K_ss
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d = d( this, ~, ~ )
      % Evaluate the deformation vector d.

      % Extract properties
      F__x = this.m_data.F__x;
      F__y = this.m_data.F__y;
      F__z = this.m_data.F__z;
      M__x = this.m_data.M__x;
      M__y = this.m_data.M__y;
      M__z = this.m_data.M__z;
      I__y = this.m_data.I__y;
      I__z = this.m_data.I__z;
      l = this.m_data.l;
      E = this.m_data.E;
      A = this.m_data.A;

      % Extract inputs
      % No inputs

      % Evaluate function
      t3 = 0.1e1 / E;
      out_7 = t3 / A * F__x * l;
      t5 = l ^ 2;
      t6 = F__y * l;
      t12 = 0.1e1 / I__y * t3;
      out_8 = t12 * (2 * t6 + 3 * M__z) * t5 / 6;
      t14 = F__z * l;
      t20 = 0.1e1 / I__z * t3;
      out_9 = t20 * (2 * t14 - 3 * M__y) * t5 / 6;
      out_10 = M__x * l / G / (I__y + I__z);
      out_11 = -t20 * (t14 - 2 * M__y) * l / 2;
      out_12 = t12 * (t6 + 2 * M__z) * l / 2;

      % Store outputs
      out_d = zeros(12, 1);
      out_d(7) = out_7;
      out_d(8) = out_8;
      out_d(9) = out_9;
      out_d(10) = out_10;
      out_d(11) = out_11;
      out_d(12) = out_12;
    end % d
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d_f = d_f( this, ~, ~ )
      % Evaluate the deformation vector d_f.

      % Extract properties
      F__x = this.m_data.F__x;
      F__y = this.m_data.F__y;
      F__z = this.m_data.F__z;
      M__x = this.m_data.M__x;
      M__y = this.m_data.M__y;
      M__z = this.m_data.M__z;
      I__y = this.m_data.I__y;
      I__z = this.m_data.I__z;
      l = this.m_data.l;
      E = this.m_data.E;
      A = this.m_data.A;

      % Extract inputs
      % No inputs

      % Evaluate function
      t3 = 0.1e1 / E;
      out_1 = t3 / A * F__x * l;
      t5 = l ^ 2;
      t6 = F__y * l;
      t12 = 0.1e1 / I__y * t3;
      out_2 = t12 * (2 * t6 + 3 * M__z) * t5 / 6;
      t14 = F__z * l;
      t20 = 0.1e1 / I__z * t3;
      out_3 = t20 * (2 * t14 - 3 * M__y) * t5 / 6;
      out_4 = M__x * l / G / (I__y + I__z);
      out_5 = -t20 * (t14 - 2 * M__y) * l / 2;
      out_6 = t12 * (t6 + 2 * M__z) * l / 2;

      % Store outputs
      out_d_f = zeros(6, 1);
      out_d_f(1) = out_1;
      out_d_f(2) = out_2;
      out_d_f(3) = out_3;
      out_d_f(4) = out_4;
      out_d_f(5) = out_5;
      out_d_f(6) = out_6;
    end % d_f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_d_s = d_s( ~, ~, ~ )
      % Evaluate the deformation vector d_s.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_d_s = sparse(6, 1);
    end % d_s
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, ~, ~ )
      % Evaluate the force vector f.

      % Extract properties
      F__x = this.m_data.F__x;
      F__y = this.m_data.F__y;
      F__z = this.m_data.F__z;
      M__x = this.m_data.M__x;
      M__y = this.m_data.M__y;
      M__z = this.m_data.M__z;
      l = this.m_data.l;

      % Extract inputs
      % No inputs

      % Evaluate function
      out_1 = -F__x;
      t1 = 0.1e1 / l;
      t2 = F__y * l;
      out_2 = -2 * (2 * t2 + 3 * M__z) * t1 + 3 * (t2 + 2 * M__z) * t1;
      t12 = F__z * l;
      out_3 = -2 * (2 * t12 - 3 * M__y) * t1 + 3 * (t12 - 2 * M__y) * t1;
      out_4 = -M__x;
      out_5 = t12 - M__y;
      out_6 = -t2 - M__z;
      out_7 = F__x;
      out_8 = F__y;
      out_9 = F__z;
      out_10 = M__x;
      out_11 = M__y;
      out_12 = M__z;

      % Store outputs
      out_f = zeros(12, 1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
      out_f(6) = out_6;
      out_f(7) = out_7;
      out_f(8) = out_8;
      out_f(9) = out_9;
      out_f(10) = out_10;
      out_f(11) = out_11;
      out_f(12) = out_12;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_f = f_f( this, ~, ~ )
      % Evaluate the force vector f_f.

      % Extract properties
      F__x = this.m_data.F__x;
      F__y = this.m_data.F__y;
      F__z = this.m_data.F__z;
      M__x = this.m_data.M__x;
      M__y = this.m_data.M__y;
      M__z = this.m_data.M__z;

      % Extract inputs
      % No inputs

      % Evaluate function
      out_1 = F__x;
      out_2 = F__y;
      out_3 = F__z;
      out_4 = M__x;
      out_5 = M__y;
      out_6 = M__z;

      % Store outputs
      out_f_f = zeros(6, 1);
      out_f_f(1) = out_1;
      out_f_f(2) = out_2;
      out_f_f(3) = out_3;
      out_f_f(4) = out_4;
      out_f_f(5) = out_5;
      out_f_f(6) = out_6;
    end % f_f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_s = f_s( this, ~, ~ )
      % Evaluate the force vector f_s.

      % Extract properties
      F__x = this.m_data.F__x;
      F__y = this.m_data.F__y;
      F__z = this.m_data.F__z;
      M__x = this.m_data.M__x;
      M__y = this.m_data.M__y;
      M__z = this.m_data.M__z;
      l = this.m_data.l;

      % Extract inputs
      % No inputs

      % Evaluate function
      out_1 = -F__x;
      t1 = 0.1e1 / l;
      t2 = F__y * l;
      out_2 = -2 * (2 * t2 + 3 * M__z) * t1 + 3 * (t2 + 2 * M__z) * t1;
      t12 = F__z * l;
      out_3 = -2 * (2 * t12 - 3 * M__y) * t1 + 3 * (t12 - 2 * M__y) * t1;
      out_4 = -M__x;
      out_5 = t12 - M__y;
      out_6 = -t2 - M__z;

      % Store outputs
      out_f_s = zeros(6, 1);
      out_f_s(1) = out_1;
      out_f_s(2) = out_2;
      out_f_s(3) = out_3;
      out_f_s(4) = out_4;
      out_f_s(5) = out_5;
      out_f_s(6) = out_6;
    end % f_s
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f_r = f_r( ~, ~, ~ )
      % Evaluate the force vector f_r.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_f_r = sparse(6, 1);
    end % f_r
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_perm = perm( ~ )
      % Evaluate the permutation vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_perm = zeros(12, 1);
      out_perm(1) = 7;
      out_perm(2) = 8;
      out_perm(3) = 9;
      out_perm(4) = 10;
      out_perm(5) = 11;
      out_perm(6) = 12;
      out_perm(7) = 1;
      out_perm(8) = 2;
      out_perm(9) = 3;
      out_perm(10) = 4;
      out_perm(11) = 5;
      out_perm(12) = 6;
    end % perm
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_unperm = unperm( ~ )
      % Evaluate the unpermutation vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_unperm = zeros(12, 1);
      out_unperm(1) = 7;
      out_unperm(2) = 8;
      out_unperm(3) = 9;
      out_unperm(4) = 10;
      out_unperm(5) = 11;
      out_unperm(6) = 12;
      out_unperm(7) = 1;
      out_unperm(8) = 2;
      out_unperm(9) = 3;
      out_unperm(10) = 4;
      out_unperm(11) = 5;
      out_unperm(12) = 6;
    end % unperm
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~ )
      % Evaluate the veiling vector.

      % Extract properties
      % No properties

      % Extract inputs
      % No inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Test_09

% That's All Folks!
